@model BExIS.Modules.Dcm.UI.Models.Metadata.MetadataAttributeModel
@using BExIS.Modules.Dcm.UI.Models
@using BExIS.Utils.WebHelpers
@using Telerik.Web.Mvc.UI
@using System.Text.RegularExpressions

@{
    string id = Model.Id + "_" + Model.Parent.Id + "_" + Model.Number + "_" + Model.ParentModelNumber + "_" + Model.NumberOfSourceInPackage + "_" + Model.ParentStepId;
    string idInput = id + "_Input";
    string idAdd = id + "_Add";
    string idRemove = id + "_Remove";
    string idUp = id + "_Up";
    string idDown = id + "_Down";

    bool hasErrors = false;
    string errorMessage = "";
    string errorClass = "";
    string lockedClass = "";
    bool locked = false;
    bool showOptional = false;

    string displayName = "";
    char tmp = ' ';

    string autoCompleteType = "";

    // Add before every uppercase word empty space (e.g. LastNameTEST -> Last Name TEST)
    displayName = Regex.Replace(Model.DisplayName, "((?<=[a-z])[A-Z])", " $1");

    // split at " "
    string[] wordList = displayName.Split(new char[0]);

    // lowercase all words, except of uppercase abbreviations (e.g. URL)  
    for (int i = 0; i < wordList.Length; i++)
    {
        if (wordList[i].ToUpper() != wordList[i])
        {
            wordList[i] = wordList[i].ToLower();
        }
    }

    displayName = String.Join(" ", wordList);

    // Make first char uppercase
    displayName = char.ToUpper(displayName[0]) + displayName.Substring(1);

    if (Model.EntityMappingExist)
    {
        autoCompleteType = "Entity";
    }
    else if (Model.PartyMappingExist)
    {
        autoCompleteType = "PartyCustomType";
    }

}

@if (Model.Number > 1)
{
    displayName += " " + Model.Number;
}

@if (ViewData.Keys.Contains("Locked") || Model.Locked)
{
    // check global locked
    if (ViewData.Keys.Contains("Locked")) { locked = (bool)ViewData["Locked"]; }
    // check attr locked
    if (!locked && Model.Locked) { locked = Model.Locked; }

    lockedClass = "bx-disabled";
}

    @if (ViewData.Keys.Contains("ShowOptional"))
{
        showOptional = (bool)ViewData["ShowOptional"];
    }


@if (Model.Errors != null && Model.Errors.Count() > 0)
{
        hasErrors = true;
    }

@if (hasErrors == true)
{
        errorClass = "bx-input-error";
        foreach (var item in Model.Errors)
        {
            if (Model.Errors.First().Equals(item))
            {
                errorMessage = item.GetMessage();
            }
            else
            {
                errorMessage += ", " + item.GetMessage();
            }
        }
    }


<div id="@id" class="metadataAttributeContent" onload="metadataAttributeOnLoad(this, @hasErrors)">

    @if (@Model != null && !(!showOptional && Model.IsEmpty && (Model.MinCardinality == 0) && locked))
    {
    <table>
        <tr><td></td><td><div id="help_@idInput" class="help" style="display: none;">@Html.Raw(Model.Discription)</div></td></tr>
        <tr>
            <td class="metadataAttributeLabel">
                @if (Model.MinCardinality > 0)
                {
                    <b title="This field is required" style="color:red">*</b>
                }

                <b>@displayName</b>

                @*Empty = @Model.IsEmpty.ToString();*@
            </td>
            <td class="metadataAttributeInput">
                @if (Model.SystemType.Equals(TypeCode.String.ToString()))
                {

                    if (Model.DataType.ToLower().Equals("text") ||
                        (Model.DataType.ToLower().Equals("string") &&
                        Model.Value != null && Model.Value.ToString().Length >= 60))
                    {
                        if (!locked)
                        {
                            if (Model.DomainList.Count == 0)
                            {
                                @Html.TextAreaFor(m => m.Value,
                                    new { OnChange = "OnChange(this)",
                                        Name = @displayName,
                                        Id = @idInput,
                                        PackageId = @Model.Parent.Id,
                                        Title = @errorMessage,
                                        @class = "bx-input bx-metadataFormTextInput " + @errorClass,
                                        onkeyup = "OnKeyUpTextArea(this)",
                                        OnLoad = "OnKeyUpTextInput(this)"
                                    })
                            }
                            else
                            {
                                @(Html.Telerik().DropDownList()
                                            .Placeholder("Select, please")
                                            .Name(@idInput)
                                            .HtmlAttributes(new { PackageId = @Model.Parent.Id, Title = @errorMessage, @class = "bx-dropdown" + @errorClass })
                                            .ClientEvents(events => events.OnChange("OnChangeDropDown"))
                                            .BindTo(new SelectList(Model.DomainList, Model.Value)))
                            }
                        }
                        else
                        {

                            //@Html.TextAreaFor(m => m.Value, new { disabled = "disabled", Name = @displayName, Id = @idInput, PackageId = @Model.Parent.Id, Title = @errorMessage, @class = "bx-input bx-metadataFormTextInput " + @errorClass + " " + lockedClass })
                        <div class="bx-metadataForm-textArea-display">
                            @if (Model.Value != null)
                            {
                                
                                @Html.DisplayWithLinksFor(m => m.Value)
                                
                            }
                        </div>
                        }



                    }

                    if (Model.DataType.ToLower().Equals("string") &&
                        ((Model.Value != null && Model.Value.ToString().Length < 60) ||
                        Model.Value == null))
                    {
                        if (!locked)
                        {

                            if (Model.DomainList.Count == 0)
                            {
                                string value = "";
                                if (@Model.Value != null)
                                {
                                    value = @Model.Value.ToString();
                                }


                                @(Html.Telerik().AutoComplete()
                                            .Name(@idInput)
                                            .Encode(false)
                                            .Value(value)
                                            .HtmlAttributes(new { @class = "bx-metadataFormTextInput " + @errorClass, title = @errorMessage, onKeyUp = "OnKeyUpTextInput(this)", test = Model.Id, type = autoCompleteType })
                                            .ClientEvents(events => events
                                                .OnChange("OnChangeTextInput")
                                                .OnClose("OnClose"))

                                            .DataBinding(dataBinding => dataBinding
                                                .Ajax().Select("_AutoCompleteAjaxLoading", "Form", new { id = Model.Id, type = Model.Source.GetType().Name })
                                                .Cache(false)
                                                )


                                            .Filterable(filtering =>
                                            {
                                                filtering.FilterMode(AutoCompleteFilterMode.Contains);
                                                filtering.MinimumChars(1);

                                            })
                                )
                                    

                            }
                            else
                            {
                                @(Html.Telerik().DropDownList()
                                            .Name(@idInput)
                                            .Placeholder("Select, please")
                                            .HtmlAttributes(new { PackageId = @Model.Parent.Id, Title = @errorMessage, @class = "bx-dropdown " + @errorClass })
                                            .ClientEvents(events => events.OnChange("OnChangeDropDown"))
                                            .BindTo(new SelectList(Model.DomainList, Model.Value)))
                            }
                        }
                        else
                        {
                            //@Html.TextBoxFor(m => m.Value, new {disabled = "disabled", Name = @displayName, Id = @idInput, PackageId = @Model.Parent.Id, Title = @errorMessage, @class = "bx-input bx-metadataFormTextInput " + @errorClass + " " + lockedClass})

                        <div class="bx-input bx-metadataFormTextInput  bx-disabled" style="padding-top: 4px;">
                            @if (Model.Value != null)
                            {
                                if (Model.EntityMappingExist && !string.IsNullOrEmpty(Model.EntityUrl))
                                {
                                    <a href="@Model.EntityUrl" target="_blank">@Model.Value</a>
                                }
                                else
                                {
                                    @Html.DisplayWithLinksFor(m => m.Value)
                                }
                            }
                        </div>

                        }

                    }

                }

                @if (Model.SystemType.Equals(TypeCode.Boolean.ToString()))
                {

                    bool value = false;//(bool?)Model.Value ?? false;
                    try
                    {
                        value = Convert.ToBoolean(Model.Value);
                    }
                    catch
                    {
                        value = false;
                    }

                    if (!locked)
                    {
                        @Html.CheckBox(Model.DisplayName, value, new { OnClick = "OnChangeCheckBox(this)", Name = @displayName, Id = @idInput, PackageId = @Model.Parent.Id, Title = @errorMessage })
                    }
                    else
                    {
                        @Html.CheckBox(Model.DisplayName, value, new { OnClick = "OnChangeCheckBox(this)", disabled = "disabled", Name = @displayName, Id = @idInput, PackageId = @Model.Parent.Id, Title = @errorMessage })
                    }

                }

                @if (Model.SystemType.Equals(TypeCode.Int32.ToString()) ||
                    Model.SystemType.Equals(TypeCode.Int64.ToString()) ||
                    Model.SystemType.Equals(TypeCode.Int16.ToString()) ||
                    Model.SystemType.Equals(TypeCode.UInt16.ToString()) ||
                    Model.SystemType.Equals(TypeCode.UInt32.ToString()) ||
                    Model.SystemType.Equals(TypeCode.UInt64.ToString())

                )
                {
                    if (!locked)
                    {

                        int value = 0;
                        value = Convert.ToInt32(Model.Value);

                        @(Html.Telerik().IntegerTextBox()
                                                        .Name(idInput)
                                                        .MinValue(0)
                                                        .MaxValue(Int32.MaxValue)
                                                        .Value(value)
                                                        .ClientEvents(events => events
                                                        .OnChange("OnChangeNumbers"))
                                                        .InputHtmlAttributes(new { PackageId = @Model.Parent.Id, Title = @errorMessage, @class = "bx-input bx-metadataFormTextInput " + @errorClass })
                        )
                    }
                    else
                    {

                        @Html.TextBoxFor(m => m.Value, new { disabled = "disabled", Name = @displayName, Id = @idInput, PackageId = @Model.Parent.Id, Title = @errorMessage, @class = "bx-input bx-metadataFormTextInput " + @errorClass + " " + lockedClass })
                    }
                }

                @if (Model.SystemType.Equals(TypeCode.Decimal.ToString()) ||
                Model.SystemType.Equals(TypeCode.Double.ToString()) ||
                Model.SystemType.Equals(TypeCode.Single.ToString())
                )
                {
                    if (!locked)
                    {
                        @Html.TextBoxFor(m => m.Value, new { OnChange = "OnChange(this)", Name = @displayName, Id = @idInput, PackageId = @Model.Parent.Id, Title = @errorMessage, @class = "bx-input bx-metadataFormTextInput " + @errorClass })
                    }
                    else
                    {
                        @Html.TextBoxFor(m => m.Value, new { OnChange = "OnChange(this)", disabled = "disabled", Name = @displayName, Id = @idInput, PackageId = @Model.Parent.Id, Title = @errorMessage, @class = "bx-input bx-metadataFormTextInput " + @errorClass })
                    }
                }


                @if (Model.SystemType.Equals(TypeCode.DateTime.ToString()))
                {
                    if (!locked)
                    {
                        string value = "";
                        if (Model.Value != null)
                        {
                            value = Model.Value.ToString();
                        }
                        else
                        {
                            value = "";//@defaultDate.ToString();
                        }
                        string format = Model.DisplayPattern;

                        if (string.IsNullOrEmpty(format))
                        {
                            format = "yyyy-MM-dd";
                        }

                        @(Html.Telerik().DatePicker()
                                    .Name(@idInput)
                                    .ShowButton(true)
                                    .TodayButton("d")
                                    .OpenOnFocus(true)
                                    .Format(format)
                                    .Value(value)
                                    .ClientEvents(events => events
                                        .OnChange("OnChangeDatePicker"))
                                    .InputHtmlAttributes(new { Title = @errorMessage, @class = @errorClass })
                        )
                    }
                    else
                    {
                        @Html.TextBoxFor(m => m.Value, new { disabled = "disabled", Name = @displayName, Id = @idInput, PackageId = @Model.Parent.Id, @class = "bx-input bx-metadataFormTextInput " + lockedClass })
                    }
                }
            </td>
            <td class="metadataAttributeOption">

                <table id="attributeOptionTable">
                    <tr>
                        <td>
                            @if (!string.IsNullOrEmpty(Model.Discription))
                            {
                                <button type="button" title="@Html.Raw(Model.Discription)" class="bx-function bx-disabled bx-info fa fa-info" onclick="showHelp('help_@idInput');" ></button>
                            }

                        </td>


                        @Html.ValidationMessageFor(m => m.Value)
                        @if (Model.MaxCardinality > 1 && !locked)
                        {

                            <td><button id="@idAdd" type="button" value="Add" name="Add" class="bx-function bx-add" onclick="OnClickAdd(this, @Model.MaxCardinality)"></button></td>
                            <td><button id="@idRemove" type="button" value="Remove" name="Remove" class="bx-function bx-delete" onclick="OnClickRemove(this)"></button></td>
                            <td>
                                @if (!Model.last)
                                {
                                    <button id="@idDown" type="button" value="Down" name="Down" class="bx-function bx-down" onclick="OnClickDown(this)"></button>
                                }
                                else
                                {
                                    <button id="@idDown" type="button" value="Down" name="Down" class="bx-function bx-down bx-disabled" disabled></button>
                                }

                            </td>
                            <td>
                                @if (!Model.first)
                                {
                                    <button id="@idUp" type="button" value="Up" name="Up" class="bx-function bx-up" onclick="OnClickUp(this)"></button>
                                }
                                else
                                {
                                    <button id="@idUp" type="button" value="Up" name="Up" class="bx-function bx-up bx-disabled" disabled></button>
                                }

                            </td>

                        }
                    </tr>
                </table>
            </td>
        </tr>
    </table>
    }

</div>
